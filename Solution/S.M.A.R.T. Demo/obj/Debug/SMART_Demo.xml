<?xml version="1.0"?>
<doc>
<assembly>
<name>
SMART_Demo
</name>
</assembly>
<members>
<member name="T:My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:DevCase.Core.Design.UnwrappedCollectionEditor`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides a user interface that unwraps the items of a collection from the 
 default "Value" property that is shown in a standard <see cref="T:System.ComponentModel.Design.CollectionEditor"/>.
 <para></para>
 Use <see cref="T:DevCase.Core.Design.UnwrappedCollectionEditor`1"/> if you want to show a collection whose items are 
 types with properties that have category attributes (<see cref="T:System.ComponentModel.CategoryAttribute"/>) applied.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Credits for Reza Aghaei's code: <see href="https://stackoverflow.com/a/53890224/1248295"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public NotInheritable Class TestClass
 
     &lt;Editor(GetType(UnwrappedCollectionEditor(Of TestItem)), GetType(UITypeEditor))&gt;
     &lt;TypeConverter(GetType(CollectionEditor))&gt;
     Public ReadOnly Property TestCollection As ReadOnlyCollection(Of TestItem)
         Get
             Dim collection As New List(Of TestItem)
             For i As Integer = 0 To 10
                 collection.Add(New TestItem())
             Next
             Return collection.AsReadOnly()
         End Get
     End Property
 
     Public Sub New()
     End Sub
 
 End Class
 
 Public NotInheritable Class TestItem
 
     &lt;Category("Category 1")&gt;
     Public ReadOnly Property TestProperty1 As String = "Test"
 
     &lt;Category("Category 2")&gt;
     Public ReadOnly Property TestProperty2 As String = "Test"
 
     &lt;Category("Category 3")&gt;
     Public ReadOnly Property TestProperty3 As String = "Test"
 
     Public Sub New()
     End Sub
 
 End Class
 
 ' Then, in another part of your source-code you will show the collection in a PropertyGrid control...:
 
 Dim obj As New TestClass()
 Me.PropertyGrid1.SelectedObject = obj
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.Design.UnwrappedCollectionEditor`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DevCase.Core.Design.UnwrappedCollectionEditor`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.Design.UnwrappedCollectionEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Edits the value of the specified object using the specified service provider and context.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="context">
 An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.
 </param>
 
 <param name="provider">
 A service provider object through which editing services can be obtained.
 </param>
 
 <param name="value">
 The object to edit the value of.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The new value of the object. 
 If the value of the object has not changed, this should return the same object it was passed.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.Design.UnwrappedCollectionEditor`1.CreateCollectionForm">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a new form to display and edit the current collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/> to provide as the user interface for editing the collection.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:DevCase.Core.IO.Tools.DeviceUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains devices related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.Tools.DeviceUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:DevCase.Core.IO.Tools.DeviceUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.Tools.DeviceUtil.GetDriveInfo(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns the corresponding <see cref="T:System.IO.DriveInfo"/> for the specified drive letter.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim driveInfo As DriveInfo = GetDriveInfo("C"c)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The drive letter, such as "C" or "D".
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.IO.DriveInfo"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 No drive found with the specified drive letter.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.Tools.DeviceUtil.GetWin32DiskDrive(System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_DiskDrive' WMI class for the specified drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim driveInfo As DriveInfo = My.Computer.FileSystem.GetDriveInfo("C"c)
 Using win32DiskDrive As ManagementObject = GetWin32DiskDrive(driveInfo)
     Console.WriteLine(win32DiskDrive.GetPropertyValue("Name").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("Model").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("SerialNumber").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("DeviceID").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("PNPDeviceID").ToString())
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveInfo">
 A <see cref="T:System.IO.DriveInfo"/> instance that represents the drive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_DiskDrive' WMI class for the specified drive.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.Tools.DeviceUtil.GetWin32DiskDrive(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_DiskDrive' WMI class for the specified drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using win32DiskDrive As ManagementObject = GetWin32DiskDrive("C"c)
     Console.WriteLine(win32DiskDrive.GetPropertyValue("Name").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("Model").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("SerialNumber").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("DeviceID").ToString())
     Console.WriteLine(win32DiskDrive.GetPropertyValue("PNPDeviceID").ToString())
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The drive letter, such as "C" or "D".
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_DiskDrive' WMI class for the specified drive.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.Tools.DeviceUtil.GetWin32LogicalDisk(System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_LogicalDisk' WMI class for the specified drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim driveInfo As DriveInfo = My.Computer.FileSystem.GetDriveInfo("C"c)
 Using win32LogicalDisk As ManagementObject = GetWin32LogicalDisk(driveInfo)
     Console.WriteLine(win32LogicalDisk.GetPropertyValue("Name").ToString())
     Console.WriteLine(win32LogicalDisk.GetPropertyValue("FileSystem").ToString())
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveInfo">
 A <see cref="T:System.IO.DriveInfo"/> instance that represents the drive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_LogicalDisk' WMI class for the specified drive.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.Tools.DeviceUtil.GetWin32LogicalDisk(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_LogicalDisk' WMI class for the specified drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using win32LogicalDisk As ManagementObject = GetWin32LogicalDisk("C"c)
     Console.WriteLine(win32LogicalDisk.GetPropertyValue("Name").ToString())
     Console.WriteLine(win32LogicalDisk.GetPropertyValue("FileSystem").ToString())
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The drive letter, such as "C" or "D".
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_LogicalDisk' WMI class for the specified drive.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:DevCase.Core.IO.DriveStorageType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the storage type of a drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.DriveStorageType.InternalStorage">
 <summary>
 Drive storage is connected within the computer chassis. 
 Usually the drive is a hard disk drive (HDD) or solid-state drive (SSD).
 </summary>
</member>
<member name="F:DevCase.Core.IO.DriveStorageType.ExternalStorage">
 <summary>
 Drive storage is connected from outside the chassis, usually by USB or eSATA.
 </summary>
</member>
<member name="T:DevCase.Core.IO.HardDriveCapabilities">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a the capabilities (such as S.M.A.R.T. notification) of a hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/cimwin32prov/win32-diskdrive"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:DevCase.Core.IO.HardDriveInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides access to information on a hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hdds As IEnumerable(Of HardDriveInfo) = HardDriveInfo.GetDrives()
 
 For Each hdd As HardDriveInfo In hdds
 
     ' System.IO.DriveInfo properties
     Console.WriteLine("{0}: {1}", NameOf(hdd.Name), hdd.Name)
     Console.WriteLine("{0}: {1}", NameOf(hdd.RootDirectory), hdd.RootDirectory.FullName)
     Console.WriteLine("{0}: {1}", NameOf(hdd.VolumeLabel), hdd.VolumeLabel)
     Console.WriteLine("{0}: {1}", NameOf(hdd.DriveFormat), hdd.DriveFormat)
     Console.WriteLine("{0}: {1}", NameOf(hdd.IsReady), hdd.IsReady)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TotalSize), hdd.TotalSize)
     Console.WriteLine("{0}: {1}", NameOf(hdd.AvailableFreeSpace), hdd.AvailableFreeSpace)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TotalFreeSpace), hdd.TotalFreeSpace)
 
     ' Win32_DiskDrive properties
     Console.WriteLine("{0}: {1}", NameOf(hdd.BytesPerSector), hdd.BytesPerSector)
     Console.WriteLine("{0}: {1}", NameOf(hdd.Capabilities), String.Join(", ", hdd.Capabilities))
     Console.WriteLine("{0}: {1}", NameOf(hdd.DeviceId), hdd.DeviceId)
     Console.WriteLine("{0}: {1}", NameOf(hdd.FirmwareRevision), hdd.FirmwareRevision)
     Console.WriteLine("{0}: {1}", NameOf(hdd.Index), hdd.PhysicalIndex)
     Console.WriteLine("{0}: {1}", NameOf(hdd.InterfaceType), hdd.InterfaceType)
     Console.WriteLine("{0}: {1}", NameOf(hdd.MediaType), hdd.MediaType.ToString())
     Console.WriteLine("{0}: {1}", NameOf(hdd.Model), hdd.Model)
     Console.WriteLine("{0}: {1}", NameOf(hdd.Partitions), hdd.Partitions)
     Console.WriteLine("{0}: {1}", NameOf(hdd.PnpDeviceId), hdd.PnpDeviceId)
     Console.WriteLine("{0}: {1}", NameOf(hdd.SectorsPerTrack), hdd.SectorsPerTrack)
     Console.WriteLine("{0}: {1}", NameOf(hdd.SerialNumber), hdd.SerialNumber)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TotalCylinders), hdd.TotalCylinders)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TotalHeads), hdd.TotalHeads)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TotalSectors), hdd.TotalSectors)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TotalTracks), hdd.TotalTracks)
     Console.WriteLine("{0}: {1}", NameOf(hdd.TracksPerCylinder), hdd.TracksPerCylinder)
 
     ' S.M.A.R.T. Attributes
     Console.WriteLine()
     Console.WriteLine("S.M.A.R.T. Attributes:")
     Dim sb As New StringBuilder()
     For Each attr As SmartAttribute In hdd.SMART.Attributes
 
         sb.AppendFormat("Id: {0:X2}, Name: {1,-30}, Current: {2,3}, Worst: {3,3}, Threshold: {4,3}, RAW: {5,12:X12}, IsHealthOk?: {6}",
                         attr.Id, attr.Name,
                         attr.CurrentValue, attr.WorstValue, attr.Threshold, attr.RawValue32,
                         attr.IsHealthOk)
         sb.AppendLine()
 
     Next
     Console.WriteLine(sb.ToString())
     Console.WriteLine()
 
 Next hdd
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.driveInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="T:System.IO.DriveInfo"/> instance that represents the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.win32DiskDrive">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Management.ManagementObject"/> which wraps a instance of 'Win32_DiskDrive' WMI class for the specified hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the hard drive, such as C:\.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.DriveFormat">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the name of the file system, such as NTFS or FAT32.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.IsReady">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that indicates whether a drive is ready.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.AvailableFreeSpace">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the amount of available free space on a drive, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TotalFreeSpace">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total amount of free space available on a drive, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TotalSize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total size of storage space on a drive, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.RootDirectory">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the root directory of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.VolumeLabel">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the volume label of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.BytesPerSector">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the mumber of bytes in each sector for the physical disk drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.bytesPerSectorB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The mumber of bytes in each sector for the physical disk drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.Capabilities">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the capabilities (such as S.M.A.R.T. notification) of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.capabilitiesB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The capabilities (such as S.M.A.R.T. notification) of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.CapabilitiesNames">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the names of the capabilities (such as S.M.A.R.T. notification) of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.DeviceId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique identifier of the disk drive on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.deviceIdB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The unique identifier of the disk drive on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.FirmwareRevision">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the revision for the hard drive firmware that is assigned by the manufacturer.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.firmwareRevisionB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The revision for the hard drive firmware that is assigned by the manufacturer.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.Index">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the physical drive index of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.indexB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The physical drive index of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.InterfaceType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the interface type of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.interfaceTypeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The interface type of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.MediaType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the type of hard drive media.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.mediaTypeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The type of hard drive media.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.Model">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the manufacturer's model number of the disk drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.modelB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The manufacturer's model number of the disk drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.Partitions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number of partitions on this hard drive that are recognized by the operating system.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.partitionsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The number of partitions on this hard drive that are recognized by the operating system.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.PnpDeviceId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Windows Plug and Play (PNP) device identifier of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.pnpDeviceIdB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The Windows Plug and Play (PNP) device identifier of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.SectorsPerTrack">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number of sectors in each track for this hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.sectorsPerTrackB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The number of sectors in each track for this hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.SerialNumber">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number allocated by the manufacturer to identify the physical media.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.serialNumberB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The number allocated by the manufacturer to identify the physical media.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TotalCylinders">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total number of cylinders on the hard drive. 
 <para></para>
 Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. 
 <para></para>
 The value may be inaccurate if the drive uses a translation scheme to support high-capacity disk sizes. 
 <para></para>
 Consult the manufacturer for accurate drive specifications.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.totalCylindersB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The total number of cylinders on the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TotalHeads">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total number of heads on the hard drive. 
 <para></para>
 Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. 
 <para></para>
 The value may be inaccurate if the drive uses a translation scheme to support high-capacity disk sizes. 
 <para></para>
 Consult the manufacturer for accurate drive specifications.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.totalHeadsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The Total number of heads on the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TotalSectors">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total number of sectors on the physical disk drive. 
 <para></para>
 Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. 
 <para></para>
 The value may be inaccurate if the drive uses a translation scheme to support high-capacity disk sizes. 
 <para></para>
 Consult the manufacturer for accurate drive specifications.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.totalSectorsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The total number of sectors on the physical disk drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TotalTracks">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total number of tracks on the physical disk drive. 
 <para></para>
 Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. 
 <para></para>
 The value may be inaccurate if the drive uses a translation scheme to support high-capacity disk sizes. 
 <para></para>
 Consult the manufacturer for accurate drive specifications.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.totalTracksB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The total number of tracks on the physical disk drive
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.TracksPerCylinder">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the number of tracks in each cylinder on the physical disk drive. 
 <para></para>
 Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. 
 <para></para>
 The value may be inaccurate if the drive uses a translation scheme to support high-capacity disk sizes. 
 <para></para>
 Consult the manufacturer for accurate drive specifications.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.tracksPerCylinderB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The number of tracks in each cylinder on the physical disk drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.HardDriveInfo.SMART">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the S.M.A.R.T. information of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInfo.smartB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The S.M.A.R.T. information of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.HardDriveInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:DevCase.Core.IO.HardDriveInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.HardDriveInfo.#ctor(System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DevCase.Core.IO.HardDriveInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="driveInfo">
 A <see cref="T:System.IO.DriveInfo"/> instance that represents the hard drive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified drive is not a hard drive.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.HardDriveInfo.#ctor(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DevCase.Core.IO.HardDriveInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The letter of the hard drive, such as "C" or "D".
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.HardDriveInfo.Refresh">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Refreshes the hard drive properties of this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.HardDriveInfo.GetDrives">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets all the hard drives of the current machine.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the hard drives of the current machine.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.HardDriveInfo.BuildWin32DiskDriveProperties">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Builds the values for the related properties of Win32_DiskDrive WMI class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:DevCase.Core.IO.HardDriveInterfaceType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the interface type of a hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.HardDriveInterfaceType.HDC">
 <summary>
 Hard Disk Controller (HDC) interface.
 </summary>
</member>
<member name="F:DevCase.Core.IO.HardDriveInterfaceType.IDE">
 <summary>
 Integrated Drive Electronics (IDE) interface.
 </summary>
</member>
<member name="F:DevCase.Core.IO.HardDriveInterfaceType.IEEE1394">
 <summary>
 Institute of Electrical and Electronics Engineers (IEEE) 1394 interface.
 </summary>
</member>
<member name="F:DevCase.Core.IO.HardDriveInterfaceType.SCSI">
 <summary>
 Small Computer System Interface (SCSI).
 </summary>
</member>
<member name="F:DevCase.Core.IO.HardDriveInterfaceType.USB">
 <summary>
 Universal Serial Bus (USB) interface.
 </summary>
</member>
<member name="T:DevCase.Core.IO.SmartAttribute">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a S.M.A.R.T. attribute of a hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.Id">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the attribute identifier.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.Name">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the attribute name.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.Description">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the attribute description.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.RawValue32">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the RAW (vendor specific) value as a 32-bit signed Integer.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.RawValue64">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the RAW (vendor specific) value as a 64-bit signed Integer.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.CurrentValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current value.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.WorstValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the worst value.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.Threshold">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the threshold value.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.Flags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the flags.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SmartAttribute.FailureImminent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determine whether the health status of this attribute is ok.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SmartAttribute.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:DevCase.Core.IO.SmartAttribute"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SmartAttribute.#ctor(System.Byte[],System.Byte[],System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DevCase.Core.IO.SmartAttribute"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="predictData">
 The vendor-specific S.M.A.R.T. data from 'MSStorageDriver_FailurePredictData' WMI class.
 </param>
 
 <param name="predictThresholds">
 The vendor-specific S.M.A.R.T. data from 'MSStorageDriver_FailurePredictThresholds' WMI class.
 </param>
 
 <param name="attributeIndex">
 The index of the S.M.A.R.T. attribute to retrieve.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SmartAttribute.BuildNameAndDescription">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Builds the <see cref="P:DevCase.Core.IO.SmartAttribute.Name"/> and <see cref="P:DevCase.Core.IO.SmartAttribute.Description"/> values, 
 in English language.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:DevCase.Core.IO.SMART">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents the S.M.A.R.T. information of a hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim SMART As New SMART("C"c)
 
 Dim sb As New StringBuilder()
 For Each attr As SmartAttribute In SMART.Attributes
 
     sb.AppendFormat("Id: {0:X2}, Name: {1,-30}, Current: {2,3}, Worst: {3,3}, Threshold: {4,3}, RAW: {5,12:X12}, IsHealthOk?: {6}",
                     attr.Id, attr.Name,
                     attr.CurrentValue, attr.WorstValue, attr.Threshold, attr.RawValue32,
                     attr.IsHealthOk)
     sb.AppendLine()
 
 Next attr
 
 Console.WriteLine(sb.ToString())
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.SMART.pnpDeviceId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Windows Plug and Play (PNP) device identifier of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.SMART.instanceName">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The Windows Plug and Play (PNP) device identifier of the hard drive, 
 specifically formatted for the MSStorageDriver_* WMI classes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SMART.IsHealthOk">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determine whether the health status of the hard drive is ok.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.SMART.isHealthOkB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 <para></para>
 A value that determine whether the health status of the hard drive is ok.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:DevCase.Core.IO.SMART.Attributes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the S.M.A.R.T. attributes of the hard drive.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:DevCase.Core.IO.SMART.attributesB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 (Backing Field)
 <para></para>
 The S.M.A.R.T. attributes of the hard drive.
 </summary>
</member>
<member name="M:DevCase.Core.IO.SMART.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:DevCase.Core.IO.SMART"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SMART.#ctor(System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DevCase.Core.IO.SMART"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="driveInfo">
 A <see cref="T:System.IO.DriveInfo"/> instance that represents the hard drive.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SMART.#ctor(System.Char)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DevCase.Core.IO.SMART"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="driveLetter">
 The hard drive letter, such as "C" or "D".
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SMART.Refresh">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Refreshes the hard drive properties of this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SMART.BuildInstanceNameAndHealthIsOk">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Builds the values of <see cref="F:DevCase.Core.IO.SMART.instanceName"/> and <see cref="F:DevCase.Core.IO.SMART.isHealthOkB"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.IO.SMART.BuildSmartAttributes">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Builds the S.M.A.R.T. attributes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://stackoverflow.com/questions/8663980/how-can-i-use-c-sharp-to-read-extended-smart-data/14894138#14894138"/>
 <para></para>
 <see href="http://www.know24.net/blog/C+WMI+HDD+SMART+Information.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:DevCase.Core.Extensions.DriveInfo.DriveInfoExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with <see cref="T:System.IO.DriveInfo"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:DevCase.Core.Extensions.DriveInfo.DriveInfoExtensions.GetDriveLetter(System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive letter of the source <see cref="T:System.IO.DriveInfo"/>.
 </summary>
 ---------------------------------------------------------------------------------------------------- 
 <example> This is a code example.
 <code>
 Dim dInfo As DriveInfo = DriveInfo.GetDrives()(0)
 Dim dLetter As Char = GetDriveLetter(dInfo)
 
 Console.WriteLine(dLetter)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.IO.DriveInfo"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting drive letter.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
</members>
</doc>
